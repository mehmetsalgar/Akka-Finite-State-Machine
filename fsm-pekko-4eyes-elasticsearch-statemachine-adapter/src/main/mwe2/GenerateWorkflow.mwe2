module org.salgar.fsm.pekko.foureyes.es.adapter

var javaPath = "src"

Workflow {
	bean = org.salgar.pekko.fsm.xtend.uml.engine.UmlGeneratorStandaloneSetup : setupConverter {
        config = {
            javaGenPath = "build/generated-sources/main/java"
            rootClass = "org.salgar.pekko.fsm.xtend.uml.templates.elk.ElkGenerator"
        }
        doInit = true
    }

    bean = org.salgar.pekko.fsm.xtend.uml.engine.UmlGeneratorStandaloneSetup : scalaSetupTransformation {
        config = {
            javaGenPath = "build/generated-sources/main/scala"
            rootClass = "org.salgar.pekko.fsm.xtend.uml.templates.elk.ScalaElkGenerator"
        }
        doInit = true
    }

    component =  org.salgar.pekko.fsm.xtext.reader.XTextReader : converterReader  {
        useJavaClassPath = true
        uriFilter = org.eclipse.xtext.mwe.NameBasedFilter {
            regularExpression = '4eyes.*\\.uml'
        }

        register = setupConverter
        loadResource = {
            slot = "modelSlot"
        }
    }

    component =  org.salgar.pekko.fsm.xtext.reader.XTextReader : scalaTransformerReader  {
        useJavaClassPath = true
        uriFilter = org.eclipse.xtext.mwe.NameBasedFilter {
            regularExpression = '4eyes.*\\.uml'
        }

        register = scalaSetupTransformation
        loadResource = {
            slot = "modelSlot"
        }
    }

	component = org.eclipse.emf.mwe.utils.DirectoryCleaner : converterCleaner {
		directory = "build/generated-sources/main/java"
	}

    component = org.eclipse.emf.mwe.utils.DirectoryCleaner : scalaTransformationCleaner {
        directory = "build/generated-sources/main/scala"
    }

	component = org.eclipse.xtext.generator.GeneratorComponent : converterGenerator {
		register = setupConverter
        slot = 'modelSlot'
        outlet = {
            path = "build/generated-sources/main/java"
        }
        outlet = {
        	outletName = "gen-once"
            path = javaPath
        }
    }

    component = org.eclipse.xtext.generator.GeneratorComponent : scalaTransformationGenerator {
        register = scalaSetupTransformation
        slot = 'modelSlot'
        outlet = {
            path = "build/generated-sources/main/scala"
        }
        outlet = {
            outletName = "gen-once"
            path = javaPath
        }
    }
}